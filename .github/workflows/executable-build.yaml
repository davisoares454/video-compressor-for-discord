name: Python Package Build & Release

permissions:
  contents: write  # Allow pushing tags and creating releases

on:
  push:
    branches:
      - main  # Runs the build process on every commit to main

  workflow_dispatch:  # Manual trigger for tagging & release
    inputs:
      version_type:
        description: "Version type (major, minor, patch)"
        required: true
        default: "patch"
        type: choice
        options:
          - major
          - minor
          - patch

jobs:
  build:
    runs-on: windows-latest  # Use Windows runner for .exe creation
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install tk pyinstaller pillow
          if (Test-Path requirements.txt) { pip install -r requirements.txt }

      - name: Generate Executable with PyInstaller
        run: |
          pyinstaller --onedir --windowed --noupx --icon=icon.png --add-data "icon.png;." app.py --name VideoCompressorForDiscord

      - name: Upload ZIP as an Artifact
        uses: actions/upload-artifact@v4
        with:
          name: VideoCompressorForDiscord
          path: dist/VideoCompressorForDiscord

  release:
    if: github.event_name == 'workflow_dispatch'  # Runs only when manually triggered
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensure full git history is fetched

      - name: Fetch all tags
        run: git fetch --tags

      - name: Get latest tag
        id: get-latest-tag
        shell: pwsh
        run: |
          $latestTag = git describe --tags --abbrev=0 2>$null
          if (-not $latestTag) { $latestTag = "v0.0.0" }
          echo "TAG=$latestTag" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Determine New Version
        id: new-version
        shell: pwsh
        run: |
          $oldTag = "${{ env.TAG }}"
          $version = $oldTag -replace "v",""
          $parts = $version -split "\."
          $major = [int]$parts[0]
          $minor = [int]$parts[1]
          $patch = [int]$parts[2]

          if ("${{ github.event.inputs.version_type }}" -eq "major") {
            $major += 1
            $minor = 0
            $patch = 0
          } elseif ("${{ github.event.inputs.version_type }}" -eq "minor") {
            $minor += 1
            $patch = 0
          } else {
            $patch += 1
          }

          $newTag = "v$major.$minor.$patch"
          echo "NEW_TAG=$newTag" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "New version determined: $newTag"

      - name: Download Built Artifact
        uses: actions/download-artifact@v4
        with:
          name: VideoCompressorForDiscord
          path: build_artifact  # Store in a separate folder

      - name: List downloaded files
        run: ls -la build_artifact

      - name: Repackage files into a versioned ZIP
        run: |
          cd build_artifact
          zip -r ../VideoCompressorForDiscord-${{ env.NEW_TAG }}.zip .
          cd ..

      - name: Verify final ZIP
        run: ls -la VideoCompressorForDiscord-${{ env.NEW_TAG }}.zip

      - name: Create and push new tag
        shell: pwsh
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git tag "${{ env.NEW_TAG }}"
          git push origin "${{ env.NEW_TAG }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.NEW_TAG }}
          name: ${{ env.NEW_TAG }}
          body: "New release: ${{ env.NEW_TAG }}"
          draft: false
          prerelease: false
          files: VideoCompressorForDiscord-${{ env.NEW_TAG }}.zip
